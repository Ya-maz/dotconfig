~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 1

  1. Курсор перемещается либо клавишами со стрелками, либо клавишами hjkl.
	h (влево)	j (вниз)	k (вверх)	l (вправо)

  2. Для запуска Vim (из приглашения командной оболочки) наберите:
			    vim ИМЯ_ФАЙЛА <ENTER>

  3. Для завершения работы с Vim наберите:
	<ESC>   :q!   <ENTER>  чтобы отказаться от сохранения изменений.
     Или наберите:
	<ESC>   :wq   <ENTER>  чтобы сохранить изменения.

  4. Для удаления символа под курсором в обычном режиме, нажмите:  x

  5. Чтобы вставить текст перед курсором в обычном режиме, наберите:
	 i   вводите вставляемый текст   <ESC>
     Чтобы добавить текст после курсора:
	 a   вводите добавляемый текст   <ESC>

Замечание! Нажатие <ESC> переместит вас в обычный режим (Normal mode) либо
	прервёт нежелательную и частично завершённую команду.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 2

  1. Для удаления текста от курсора до конца слова наберите:	dw

  2. Для удаления текста от курсора до конца строки наберите:	d$

  3. Для удаления всей строки наберите:		dd

  4. Для повтора перемещения введите количество перед командой:	2w

  5. Формат команды в обычном режиме имеет вид:

       [число]   команда   объект     ИЛИ     команда	[число]   объект
     где:
       [число] - сколько раз повторить выполнение команды, опционально
       команда - что выполнить, например d для удаления
       объект  - на что должна воздействовать команда, например w (слово),
		$ (до конца строки), и т.д.

  6. Для перехода к началу строки используйте нуль:  0

  7. Для отмены (отката) предшествующих действий наберите:  u  (строчная u)
     Для отмены (отката) всех изменений в строке наберите:  U  (прописная U)
     Для отмены отката наберите:  CTRL-R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 3

  1. Для вставки текста, который только что был удалён, наберите  p . Эта
     команда вставит удалённый текст ПОСЛЕ курсора (если была удалена строка,
     то она будет помещена в строке под курсором).

  2. Для замены символа под курсором наберите  r  и затем заменяющий символ.

  3. Команда изменения позволяет вам изменить указанный объект от курсора до
     окончания перемещения. Например, наберите  ce  для замены от курсора до
     конца слова,  c$  для изменения до конца строки.

  4. Формат команды изменения таков:

	 [число]   c   объект         ИЛИ         c   [число]   объект
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 4

  1. Ctrl-g  показывает ваше положение в файле и информацию о нем.
     Shift-G  перемещает вас в конец файла. Номер, за которым следует Shift-G
     позволяет перейти к строке с этим номером.
     gg  перемещает вас к первой строке файла.

  2. Нажатие  /  и затем ввод строки позволяет произвести поиск этой строки
     ВПЕРЁД по тексту.
     Нажатие  ?  и затем ввод строки позволяет произвести поиск этой строки
     НАЗАД по тексту.
     После поиска наберите  n  для перехода к следующему вхождению искомой
     строки в том же направлении или Shift-N для перехода в противоположном
     направлении.

  3. Нажатие  % , когда курсор находится на (,),[,],{, или } позволяет найти
     парную скобку.

  4. Для подстановки `стало' вместо первого `было' в строке, наберите
	:s/было/стало
     Для подстановки `стало' вместо всех `было' в строке, наберите
	:s/было/стало/g
     Для замены в интервале между двумя строками, наберите
	:#,#s/было/стало/g
     Для замены всех вхождений `было' на `стало' в файле, наберите
	:%s/было/стало/g
     Чтобы редактор каждый раз запрашивал подтверждение, добавьте 'c'
	:%s/было/стало/gc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 5

  1.  :!команда  исполняет внешнюю команду.

      Некоторые полезные примеры:
      	(MS-DOS)	(Unix)
	 :!dir		 :!ls		-- вывести список файлов в каталоге.
	 :!del ИМЯ	 :!rm ИМЯ	-- удалить файл по имени.

  2.  :w ИМЯ_ФАЙЛА  записывает текущий редактируемый в Vim файл на диск под
      указанным именем.

  3.  v  перемещение  :w ИМЯ_ФАЙЛА  сохраняет визуально выбранные строки в файл
      с указанным именем.

  4.  :r ИМЯ_ФАЙЛА  считывает с диска файл с указанным именем и помещает его
      ниже курсора.

  5.  :r !dir  читает вывод команды dir и помещает его ниже курсора.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 РЕЗЮМЕ УРОКА 6

  1. Нажмите  o  для создания строки НИЖЕ курсора и перехода в режим вставки.
     Нажмите  O  для создания строки ВЫШЕ курсора.

  2. Нажмите  a  для вставки текста ПОСЛЕ курсора.
     Нажмите  A  для вставки текста в конец строки.

  3. Команда  e  подводит курсор к концу слова.

  4. Команда  y  копирует текст,  p  -- вставляет скопированный текст.

  5. Нажатие заглавной  R  переводит в режим замены до нажатия клавиши  <ESC> .

  6. Наберите `:set xxx' для включения параметра `xxx', некоторые параметры:

	`ic'	`ignorecase'	игнорирование регистра при поиске
	`is'	`incsearch'	отображение частичных совпадений при поиске
	`hls'	`hlsearch'	подсветка всех совпадений при поиске

  7. Добавьте `no' перед параметром для его отключения:  :set noic

  Замечание! Для отключения подсветки совпадений наберите:  :nohlsearch

  Замечание! Если вы хотите игнорировать регистр только для одного поиска,
	  используйте  \с  в команде поиска:  /игнорировать\c  <ENTER>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        От себя
  1. Команда для открытие дерево катологов ctrl+T. Работает как toggle.
    Для плагина NordTree

  2. Команда для переключения между vim окнами - ctrl+w.

  3. Для копирование текста из одно файла в другой.
      -копируешь текст (с помощью visual mode или (количества строк)yy)
      -после появления надписи 33 line yanked в командрой строке
      -надписать в команде :e {название файла куда хочешь вставить текст}
      -открывается второй файл и нажимаешь на кнопку ставки p
      -выходишь из второго файла с помощью команды :wq

  4. Команда для разделение vim оболочки на двое ctrl-s

  5. Набор команд для замены и ставки по всему проекту:
     Нужно находится в той папке, в которой хочется произвести поиск
     :vimgrep /pattern/ **.*tsx - поиск с указанным шаблоном по всему проекту
     :cope - открывает буффер quickfix в котором показывается все нахождения
        из поиска
     :cfdo %s/old/new/gc - производит замену с подтверждением
     :cfdo update - сохранить все изменение в файлах
     :cq - закрывает буффер quickfix

     пример замены
     :vimgrep /name/ **
     :cope
     :cdo s/name/label/gc (или можно написать :cfdo %s/name/label/gc)
     :cfdo update
     :cclose

  6. (NeoVim) :Explore mode.
  https://neovim.io/doc/user/pi_netrw.html#netrw-mf

  The following netrw maps make use of marked files:
    netrw-a  	Hide marked files/directories
    netrw-D  	Delete marked files/directories
    netrw-ma  	Move marked files' names to arglist
    netrw-mA  	Move arglist filenames to marked file list
    netrw-mb  	Append marked files to bookmarks
    netrw-mB  	Delete marked files from bookmarks
    netrw-mc  	Copy marked files to target
    netrw-md  	Apply vimdiff to marked files
    netrw-me  	Edit marked files
    netrw-mF  	Unmark marked files
    netrw-mg  	Apply vimgrep to marked files
    netrw-mm  	Move marked files to target
    netrw-ms  	Netrw will source marked files
    netrw-mt  	Set target for netrw-mm and netrw-mc
    netrw-mT  	Generate tags using marked files
    netrw-mv  	Apply vim command to marked files
    netrw-mx  	Apply shell command to marked files
    netrw-mX  	Apply shell command to marked files, en bloc
    netrw-mz  	Compress/Decompress marked files
    netrw-O  	Obtain marked files
    netrw-R  	Rename marked files



  Расположение важных файлов vim/nvim

  ~/.config/nvim/init.vim - самое важное.Здесь находятся настройки nvim.
  ~/.config/nvim/coc-settings.json - здесь находятся базовые настройки для
    расширений coc(lint, prettier, tsserver)
  ~/.config/nvim/a.out -возможно системный файл самого редактора
  ~/.config/nvim/plugged - здесь находится список тем, которое я скачал(как-то)

  ~/.vim/autoload - здесь находится настройки vim по умолчанию, если кастомная
    настройка сломается будет применять эти дефолтные настройки
  ~/.vim/plugged - здесь находятся все расширения для vim/nvim, код из репы

  Для установки, работы с плагинами

  Нужно зайти в файл ~/.config/nvim/init.vim и в командой строке прописать
    :PlugInstall
  остальные команды можно увидеть если набрать :Plug и нажать tab

  Для работы плагина Telescope в режиме live_grep нужна ripgrep

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Movement/editing/writing Hotkeys:

h	move left

j	move down

k	move up

l	move right

w	jump by start of words (punctuation considered words)

W	jump by words (spaces separate words)

e	jump to end of words (punctuation considered words)

E	jump to end of words (no punctuation)

b	jump backward by words (punctuation considered words)

B	jump backward by words (no punctuation)

0	(zero) start of line

^	first non-blank character of line

$	end of line

G	Go To command (prefix with number

i	start insert mode at cursor

I	insert at the beginning of the line

a	append after the cursor

A	append at the end of the line

o	open (append) blank line below current line

O	open blank line above current line

ea	append at end of word

r	replace a single character (does not use insert mode)

J	join line below to the current one

cc	change (replace) an entire line

cw	change (replace) to the end of word

c$	change (replace) to the end of line

s	delete character at cursor and subsitute text

S	delete line at cursor and substitute text (same as cc)

yy	yank (copy) a line

2yy	yank 2 lines

yw	yank word

y$	yank to end of line

yt)  yank to )

yi(  yank all inside (

ya(  yank all inside ( with ()

p	put (paste) the clipboard after cursor

P	put (paste) before cursor

dd	delete (cut) a line

dw	delete (cut) the current word

x	delete (cut) current character

:w	write (save) the file, but don't exit

:wq	write (save) and quit

:q	quit (fails if anything has changed)

:q!	quit and throw away changes

fw  find first 'w' letter (find forward)

Fw  find first 'w' letter (find back)


2. File/window hotkeys:

/pattern	search for pattern

?pattern	search backward for pattern

n		repeat search in same direction

N		repeat search in opposite direction

:e filename	Edit a file in a new buffer

:bnext (or :bn)	go to next buffer

:bprev (of :bp)	go to previous buffer

:bd		delete a buffer (close a file)

:sp filename	Open a file in a new buffer and split window

ctrl+ws		Split windows

ctrl+ww		switch between windows

ctrl+wq		Quit a window

ctrl+wv		Split windows vertically

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

useful tips for working with the nvim (from youtube)

скопировать текст в именнованный буфер с возможность допольнить буфер
:reg
Did you know you can append to a named register?
“xY will yank the current line into register x. “XY will append 
the current line to register x. This lets you build up a register to paste 
later. For example: you want to grab a couple lines of code from several 
locations and paste them into a new function, you can gather them all into 
that register and then do one paste when you have them assembled.

скоприровать имя файла
можно поместить имя файла в буфер обмена с помощью команды 
:let @+=@%

работа с макросами
для начала регистрации q + название макро 'e' (тут e это пример)
записываем последовательность нажатий клавиш
завершаем q
для воспроизведение макроса количества + @e

копировать файл с перемеинованием файла
:!cp % new_%  -- создаться новый файл с названием 'new_*'

выполнить команду и результат вставить в nvim
:r !date
:r !cat fileName

декодирование строки base64
есть строка:
dmltIGNhbiBkZWNvZGUgYmFzZTY0IHRvIHN0cmluZywgd29vdw==
:.!base64 -d (-d флаг - декодирование)

Форматирование текста
1.JSON c prettier
:.!jq .
2.вроде из дока vim
=G
3.нашел в документации vim
gq
4.для текущей настройки (remap.lua)
<leader>f
5.обращение на прямую к плагину (formatting.lua)
<leader>mp


сортировка выделенной строки
сочетание клавиш vip:
должен выделиться параграф (vip выеделения параграфа) и в командной строке 
появииться :'<,>'
дописать так:'<,>'!sort -n (-n флаг по названию)

Убрать vim на фон, тоесть открывается доступ к терминалу
<C-z>
для возвращения обратно в vim
fg

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            книга: Практичекское использованеи Vim (изд.2)

                            РЕЗЮМЕ 

ЧАСТЬ I.РЕЖИМЫ
1.ДЛЯ ПОИСКА ПО СТРОКЕ
f<char>
при необходимости повтороить действие поиска
;

2.ПРИ НЕОБХОДИМОСТИ ПЕРЕВЕСТИ СЛОВО В ВЕРХНИЙ РЕГИСТР
gUw
тут gU - команда, w - цель применение команды
в нижниий
guw

3.ПРИ НЕОБХОДИМОСТИ РЕДКАТИРОВАТЬ ЗНАЧЕНИЕ ЧИСЛА 
180<C-x>
отнимет значение (допустим было 0 станет -180)
180<C-a>
прибавит значение (допустим было 0 станет 180)(при текущей настройки не 
сработает, на <C-a> работает выделение всего текста)
при условии что курсор на той же строке что и цель

4.В РЕЖИМЕ INSERT 
<C-h>
работает как baskspace
<C-w>
удалит предыдущее слово

5.выход из режиме insert
<Ecs>
<C-[>

6.ВСТАВКА ИЗ РЕГИСТРА В РЕЖИМЕ INSERT
<C-r>{register}

7.ДОСТУП К ВСТРОЕННОМУ КАЛЬКУЛЯТОРУ
<C-r>=
пример: <C-r>=1+1<CR> 
в результате под курсором появится цифра 2

8.ВСТАВКА СПЕЦ.СИМВОЛА ПО ЕГО КОДУ
<C-v>u{1234}
пример: <C-v>u444
в результате появится символ - 䑄

9.ПЕРЕКЛЮЧЕНИЕ СВОБОДНОГО КОНЦА ВЫДЕЛЕНИЯ
в режиме visual можно вернуться к началу веделение нажав
o

10.РЕЖИМ VISUAL LINE
V
пример
Vr-
было
в режиме visual можно вернуться к началу веделение нажав
стало

11. РАБОТА В КОМАНДНОЙ СТРОКЕ
(для корректной работый с ней лучше убрать относиильтную нумерацию строк)
для копирование
t
для пермещания
m
для удаления 
d
шаблон использования
:[range]move{address}
пример - Вставит копию 6-й строки за текущей
:6t.
пример - Скопирует текущую строку и вставит ее за 6-й строкой
:t6
пример - Скопирует текущую строку и вставит ее за текущей (аналог
команды yyp в командном режиме)
:t.

команда :normal для применения определенной команды для диапозона строк, пример
:%normal . для всего текста применит предыдыщую команду (точка, повторяет
прыдыдущую команду) :'<,'>normal i// для выделенного текста применит команду, в
начале каждой строки поставил //

так же как точка (.) повторяет предыдущую команду, так же команда (@:)
повторяет предыдущую команду из командной строки

открыть историю команд
q:
поиск по истории команда
q/
историю команды так же можно редактировать будто это буфер вима

чтоб увидеть магию vim можно зайти в файл ./example и в командной строке набрать
:source example-comand.vim
применятся все команды из файла example-comand.vim для файла ./example
посмотри что за чудо произошло

команда :normal для применения определенной команды для диапозона строк, пример
:%normal .
для всего текста применит предыдыщую команду (точка, повторяет прыдыдущую команду)
:'<,'>normal i//
для выделенного текста применит команду, в начале каждой строки поставил //

есть возможность записат последовательность команда в отдельный файл (полезно, 
когда нужно применить набор команд для множества файлов)
пример использование в файлах ./example и ./example-comand.vim
./example - target, на каким файлом будут применяться команды
./example-comand.vim - файл с командами
для применения, нужно открыть файл ./example в vim и вести команда
:source ./example-comand.vim
и посмотрить на чудо которое произошло с файлом
для применения на несколько файлов
:args
[./path-file1, ./path-file2, ...]
:argdo source ./example-comand.vim

ЧАСТЬ II.ФАЙЛЫ
1. Управдение нескольками файлами
для этого можно вызвать vim с нескольками файлами
из командой строки bash
vim examle*
или в открытом редакторе vim
:args example example-comand
так же можно испольвоться шаблоны
:args ** **/*.lua **/*.*

если есть файл с перчислением всех нужных файлов такой как ./example-list
можно открыть несколько файлов с помощью
:args `cat ./example-list`

ЧАСТЬ III.БЫСТРАЯ НАВИГАЦИЯ
можно успешно навигировать по словам с помощью (для меня было не очевидно)
/find

навигация по меткам
`` - позиция перед последнем переходом
`. - место последнего изменения
`^ - место последней вставки
`[ - начало последнего изменения или вставки
`] - конец ...

создать метку в файле
mm
перейти к метке в файле 
`m
